{
    "openapi": "3.0.0",
    "info": {
        "title": "Dynatrace Account Management API",
        "description": "The enterprise management API for Dynatrace SaaS enables automation of operational tasks related to user access and environment lifecycle management.",
        "version": "1.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "UserLoginMetaDataDto": {
                "type": "object",
                "properties": {
                    "successfulLoginCounter": {
                        "type": "number",
                        "description": "The number of successful sign-ins."
                    },
                    "failedLoginCounter": {
                        "type": "number",
                        "description": "The number of failed sign-ins."
                    },
                    "lastSuccessfulLogin": {
                        "type": "string",
                        "description": "The date and time of the most recent successful sign-in in `2021-05-01T15:11:00Z` format."
                    },
                    "lastFailedLogin": {
                        "type": "string",
                        "description": "The date and time of the most recent failed sign-in in `2021-05-01T15:11:00Z` format."
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of user creation in `2021-05-01T15:11:00Z` format."
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the most recent modification to the user in `2021-05-01T15:11:00Z` format."
                    }
                },
                "required": [
                    "successfulLoginCounter",
                    "failedLoginCounter",
                    "lastSuccessfulLogin",
                    "lastFailedLogin",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "UsersDto": {
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "The UUID of the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user."
                    },
                    "name": {
                        "type": "string",
                        "description": "The first name of the user."
                    },
                    "surname": {
                        "type": "string",
                        "description": "The last name of the user."
                    },
                    "userStatus": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "PENDING",
                            "DELETED",
                            "ECUSTOMS_MANUALLY_BLOCKED"
                        ],
                        "description": "The status of this user in Dynatrace: \n\n* `ACTIVE`: The user is active.\n* `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace. \n* `PENDING`: The user received an invitation, but hasn't completed sign-up yet. \n* `DELETED`: The user is deleted from the account and cannot sign in to Dynatrace. \n* `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation. \n"
                    },
                    "emergencyContact": {
                        "type": "boolean",
                        "description": "The user is (`true`) or is not (`false`) an emergency contact for the account."
                    },
                    "userLoginMetadata": {
                        "$ref": "#/components/schemas/UserLoginMetaDataDto"
                    }
                },
                "required": [
                    "uid",
                    "email",
                    "name",
                    "surname",
                    "userStatus",
                    "emergencyContact",
                    "userLoginMetadata"
                ]
            },
            "UserListDto": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "items": {
                        "description": "A list of the account's users.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UsersDto"
                        }
                    }
                },
                "required": [
                    "count",
                    "items"
                ]
            },
            "AccountGroupDto": {
                "type": "object",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "The name of the user group."
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the user group."
                    },
                    "owner": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "SCIM",
                            "SAML",
                            "DCS"
                        ],
                        "description": "The identity provider from which the group originates."
                    },
                    "accountUUID": {
                        "type": "string",
                        "description": "The UUID of the Dynatrace account."
                    },
                    "accountName": {
                        "type": "string",
                        "description": "The name of the Dynatrace account."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the group."
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the group creation in `2021-05-01T15:11:00Z` format."
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the most recent modification to the group in `2021-05-01T15:11:00Z` format."
                    }
                },
                "required": [
                    "groupName",
                    "uuid",
                    "owner",
                    "accountUUID",
                    "accountName",
                    "description",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "GroupUserDto": {
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "The UUID of the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user."
                    },
                    "name": {
                        "type": "string",
                        "description": "The first name of the user."
                    },
                    "surname": {
                        "type": "string",
                        "description": "The last name of the user."
                    },
                    "userStatus": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "PENDING",
                            "DELETED",
                            "ECUSTOMS_MANUALLY_BLOCKED"
                        ],
                        "description": "The status of this user in Dynatrace: \n\n* `ACTIVE`: The user is active.\n* `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace. \n* `PENDING`: The user received an invitation, but hasn't completed sign-up yet. \n* `DELETED`: The user is deleted from the account and cannot sign in to Dynatrace. \n* `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation. \n"
                    },
                    "emergencyContact": {
                        "type": "boolean",
                        "description": "The user is (`true`) or is not (`false`) an emergency contact for the account."
                    },
                    "groups": {
                        "description": "A list of groups of which the user is a member.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountGroupDto"
                        }
                    }
                },
                "required": [
                    "uid",
                    "email",
                    "name",
                    "surname",
                    "userStatus",
                    "emergencyContact",
                    "groups"
                ]
            },
            "UserEmailDto": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the user."
                    }
                },
                "required": [
                    "email"
                ]
            },
            "GetGroupDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the user group."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the user group."
                    },
                    "federatedAttributeValues": {
                        "description": "A list of values associating this group with the corresponding claim from an identity provider.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "owner": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "SCIM",
                            "SAML",
                            "DCS"
                        ],
                        "description": "The identity provider from which the group originates."
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the group creation in `2021-05-01T15:11:00Z` format."
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the most recent group modification in `2021-05-01T15:11:00Z` format."
                    }
                },
                "required": [
                    "name",
                    "owner",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "GroupListDto": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetGroupDto"
                        }
                    }
                },
                "required": [
                    "count",
                    "items"
                ]
            },
            "UserDto": {
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "The UUID of the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user."
                    },
                    "name": {
                        "type": "string",
                        "description": "The first name of the user."
                    },
                    "surname": {
                        "type": "string",
                        "description": "The last name of the user."
                    },
                    "userStatus": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "PENDING",
                            "DELETED",
                            "ECUSTOMS_MANUALLY_BLOCKED"
                        ],
                        "description": "The status of this user in Dynatrace: \n\n* `ACTIVE`: The user is active.\n* `INACTIVE`: The user is deactivated and cannot sign in to Dynatrace. \n* `PENDING`: The user received an invitation, but hasn't completed sign-up yet. \n* `DELETED`: The user is deleted from the account and cannot sign in to Dynatrace. \n* `ECUSTOMS_MANUALLY_BLOCKED`: The user is blocked due to to a trade and export compliance violation. \n"
                    },
                    "emergencyContact": {
                        "type": "boolean",
                        "description": "The user is (`true`) or is not (`false`) an emergency contact for the account."
                    }
                },
                "required": [
                    "uid",
                    "email",
                    "name",
                    "surname",
                    "userStatus",
                    "emergencyContact"
                ]
            },
            "GroupUserListDto": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserDto"
                        }
                    }
                },
                "required": [
                    "count",
                    "items"
                ]
            },
            "PutGroupDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the user group."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the user group."
                    },
                    "federatedAttributeValues": {
                        "description": "A list of values associating this group with the corresponding claim from an identity provider.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "name"
                ]
            },
            "PermissionsDto": {
                "type": "object",
                "properties": {
                    "permissionName": {
                        "type": "string",
                        "enum": [
                            "account-company-info",
                            "account-user-management",
                            "account-viewer",
                            "tenant-viewer",
                            "tenant-manage-settings",
                            "tenant-agent-install",
                            "tenant-logviewer",
                            "tenant-view-sensitive-request-data",
                            "tenant-configure-request-capture-data",
                            "tenant-replay-sessions-with-masking",
                            "tenant-replay-sessions-without-masking",
                            "tenant-manage-security-problems",
                            "tenant-manage-support-tickets"
                        ]
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope (account-uuid, tenant-id, or {tenant-id}:{management-zone-id} for this permission"
                    },
                    "scopeType": {
                        "type": "string",
                        "enum": [
                            "account",
                            "tenant",
                            "management-zone"
                        ]
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "permissionName",
                    "scope",
                    "scopeType",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "PermissionsGroupDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the user group."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the user group."
                    },
                    "federatedAttributeValues": {
                        "description": "A list of values associating this group with the corresponding claim from an identity provider.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "owner": {
                        "type": "string",
                        "enum": [
                            "LOCAL",
                            "SCIM",
                            "SAML",
                            "DCS"
                        ],
                        "description": "The identity provider from which the group originates."
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The date and time of the group creation in `2021-05-01T15:11:00Z` format."
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date and time of the most recent group modification in `2021-05-01T15:11:00Z` format."
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PermissionsDto"
                        }
                    }
                },
                "required": [
                    "name",
                    "owner",
                    "createdAt",
                    "updatedAt",
                    "permissions"
                ]
            },
            "PermissionDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Available permission id"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "description"
                ]
            },
            "PolicyOverview": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The ID of the policy."
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the policy."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the policy."
                    },
                    "levelId": {
                        "type": "string",
                        "description": "The ID of the level to which the policy applies."
                    },
                    "levelType": {
                        "type": "string",
                        "description": "The type of the level to which the policy applies."
                    }
                },
                "required": [
                    "uuid",
                    "name",
                    "description",
                    "levelId",
                    "levelType"
                ]
            },
            "PolicyOverviewDtoList": {
                "type": "object",
                "properties": {
                    "policyOverviewList": {
                        "description": "A list of policies.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PolicyOverview"
                        }
                    }
                },
                "required": [
                    "policyOverviewList"
                ]
            },
            "ErrorDto": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "number",
                        "description": "The code of the error."
                    },
                    "message": {
                        "type": "string",
                        "description": "A short description of the error."
                    }
                },
                "required": [
                    "code",
                    "message"
                ]
            },
            "PolicyDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The ID of the policy."
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the policy."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the policy."
                    }
                },
                "required": [
                    "uuid",
                    "name",
                    "description"
                ]
            },
            "PolicyDtoList": {
                "type": "object",
                "properties": {
                    "policies": {
                        "description": "A list of policies.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PolicyDto"
                        }
                    }
                },
                "required": [
                    "policies"
                ]
            },
            "CreateOrUpdateLevelPolicyRequestDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The display name of the policy."
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the policy."
                    },
                    "tags": {
                        "description": "A list of tags.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "statementQuery": {
                        "type": "string",
                        "description": "The [statement](https://dt-url.net/ht03ucb) of the policy."
                    }
                },
                "required": [
                    "name",
                    "description",
                    "tags",
                    "statementQuery"
                ]
            },
            "ValidationDto": {
                "type": "object",
                "properties": {
                    "warnings": {
                        "description": "A list of validation warnings.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "warnings"
                ]
            },
            "Condition": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the condition. \n\n It indicates which part of the **services** is checked by the condition."
                    },
                    "operator": {
                        "type": "string",
                        "description": "The operator of the condition."
                    },
                    "values": {
                        "description": "A list of reference values of the condition.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "name",
                    "operator",
                    "values"
                ]
            },
            "Statement": {
                "type": "object",
                "properties": {
                    "effect": {
                        "type": "string",
                        "description": "The effect of the policy (for example, allow something)."
                    },
                    "service": {
                        "type": "string",
                        "description": "The service to which the policy applies."
                    },
                    "permissions": {
                        "description": "A list of granted permissions.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "conditions": {
                        "description": "A list of conditions limiting the granted permissions.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Condition"
                        }
                    }
                },
                "required": [
                    "effect",
                    "service",
                    "permissions",
                    "conditions"
                ]
            },
            "LevelPolicyDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The ID of the policy."
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the policy."
                    },
                    "tags": {
                        "description": "A list of tags.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the policy."
                    },
                    "statementQuery": {
                        "type": "string",
                        "description": "The [statement](https://dt-url.net/ht03ucb) of the policy."
                    },
                    "statements": {
                        "description": "The expanded form of the policy statement.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Statement"
                        }
                    }
                },
                "required": [
                    "uuid",
                    "name",
                    "tags",
                    "description",
                    "statementQuery",
                    "statements"
                ]
            },
            "PolicyUuidsDto": {
                "type": "object",
                "properties": {
                    "policyUuids": {
                        "description": "A list of policies bound to the user group.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "policyUuids"
                ]
            },
            "Binding": {
                "type": "object",
                "properties": {
                    "policyUuid": {
                        "type": "string",
                        "description": "The ID of the policy."
                    },
                    "groups": {
                        "description": "A list of user groups to which the policy applies.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "policyUuid",
                    "groups"
                ]
            },
            "LevelPolicyBindingDto": {
                "type": "object",
                "properties": {
                    "levelType": {
                        "type": "string",
                        "description": "The type of the policy level."
                    },
                    "levelId": {
                        "type": "string",
                        "description": "The ID of the policy level."
                    },
                    "policyBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Binding"
                        }
                    }
                },
                "required": [
                    "levelType",
                    "levelId",
                    "policyBindings"
                ]
            },
            "CreateLevelPolicyBindingsRequestDto": {
                "type": "object",
                "properties": {
                    "policyBindings": {
                        "description": "A list of policy bindings of the user group.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Binding"
                        }
                    }
                },
                "required": [
                    "policyBindings"
                ]
            },
            "AppendLevelPolicyBindingsRequestDto": {
                "type": "object",
                "properties": {
                    "groups": {
                        "description": "A list of user groups (specified by IDs) to which the policy applies.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "groups"
                ]
            },
            "LevelBindingGroupDto": {
                "type": "object",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "groups"
                ]
            },
            "AccountContractDto": {
                "type": "object",
                "properties": {
                    "concurrentHostsUnits": {
                        "type": "number",
                        "description": "The total amount of host units that the account owns."
                    },
                    "hostUnitOverageAllowed": {
                        "type": "boolean",
                        "description": "The overage is (`true`) or is not (`false`) enabled for the account. \n\nIf the overage is enabled, the account can exceed the quota. To learn more about host units consumption, see [Application and Infrastructure Monitoring](https://dt-url.net/hu03ub5) in Dynatrace Documentation."
                    }
                },
                "required": [
                    "concurrentHostsUnits",
                    "hostUnitOverageAllowed"
                ]
            },
            "EnvironmentLimitListDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The ID of the environment."
                    },
                    "concurrentHostsUnits": {
                        "type": "number",
                        "description": "The total amount of host units assigned to the environment."
                    },
                    "hostUnitOverageAllowed": {
                        "type": "boolean",
                        "description": "The overage is (`true`) or is not (`false`) enabled for the environment. \n\nIf the overage is enabled, the environment can exceed the quota. To learn more about host units consumption, see [Application and Infrastructure Monitoring](https://dt-url.net/hu03ub5) in Dynatrace Documentation."
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the environment."
                    }
                },
                "required": [
                    "uuid",
                    "concurrentHostsUnits",
                    "hostUnitOverageAllowed",
                    "name"
                ]
            },
            "ContractLimitDto": {
                "type": "object",
                "properties": {
                    "accountInfo": {
                        "$ref": "#/components/schemas/AccountContractDto"
                    },
                    "environmentInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentLimitListDto"
                        }
                    }
                },
                "required": [
                    "accountInfo",
                    "environmentInfo"
                ]
            },
            "HostMonitoringOverageEnabledDto": {
                "type": "object",
                "properties": {
                    "hostUnitOverageAllowed": {
                        "type": "boolean",
                        "description": "The overage is (`true`) or is not (`false`) enabled for the environment. \n\nIf the overage is enabled, the environment can exceed the quota."
                    }
                },
                "required": [
                    "hostUnitOverageAllowed"
                ]
            },
            "EnvironmentChangeListDto": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The ID of the environment."
                    },
                    "concurrentHostsUnits": {
                        "type": "number",
                        "description": "The total amount of host units assigned to the environment."
                    },
                    "hostUnitOverageAllowed": {
                        "type": "boolean",
                        "description": "The overage is (`true`) or is not (`false`) enabled for the environment. \n\nIf the overage is enabled, the environment can exceed the quota. To learn more about host units consumption, see [Application and Infrastructure Monitoring](https://dt-url.net/hu03ub5) in Dynatrace Documentation."
                    }
                },
                "required": [
                    "uuid",
                    "concurrentHostsUnits",
                    "hostUnitOverageAllowed"
                ]
            },
            "TenantResourceDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the environment."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the environment."
                    }
                },
                "required": [
                    "name",
                    "id"
                ]
            },
            "ManagementZoneResourceDto": {
                "type": "object",
                "properties": {
                    "parent": {
                        "type": "string",
                        "description": "The ID of the environment to which the management zone belongs."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the management zone."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the management zone."
                    }
                },
                "required": [
                    "parent",
                    "name",
                    "id"
                ]
            },
            "EnvironmentResourceDto": {
                "type": "object",
                "properties": {
                    "tenantResources": {
                        "description": "A list of environments in the account.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TenantResourceDto"
                        }
                    },
                    "managementZoneResources": {
                        "description": "A list of management zones in the account.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ManagementZoneResourceDto"
                        }
                    }
                },
                "required": [
                    "tenantResources",
                    "managementZoneResources"
                ]
            },
            "TimeZoneDto": {
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Timezone name"
                    },
                    "name": {
                        "type": "string",
                        "description": "Timezone standard name"
                    }
                },
                "required": [
                    "displayName",
                    "name"
                ]
            },
            "RegionDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Available region name"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ClaSubscriptionDto": {
                "type": "object",
                "properties": {
                    "subscriptionId": {
                        "type": "number",
                        "description": "The ID of the Dynatrace Platform Subscription."
                    },
                    "start": {
                        "type": "string",
                        "description": "The start date and time of the subscription in `2021-05-01T15:11:00Z` format."
                    },
                    "end": {
                        "type": "string",
                        "description": "The end date and time of the subscription in `2021-05-01T15:11:00Z` format."
                    }
                },
                "required": [
                    "subscriptionId",
                    "start",
                    "end"
                ]
            },
            "ClaSubscriptionListDto": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "records": {
                        "description": "A list of subscriptions of the account.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaSubscriptionDto"
                        }
                    }
                },
                "required": [
                    "totalCount",
                    "records"
                ]
            },
            "ClaClusterDto": {
                "type": "object",
                "properties": {
                    "clusterUuid": {
                        "type": "string",
                        "description": "The ID of the cluster."
                    }
                },
                "required": [
                    "clusterUuid"
                ]
            },
            "ClaClusterListDto": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "records": {
                        "description": "A list of clusters of the account.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaClusterDto"
                        }
                    }
                },
                "required": [
                    "totalCount",
                    "records"
                ]
            },
            "ClaEnvironmentDto": {
                "type": "object",
                "properties": {
                    "environmentUuid": {
                        "type": "string",
                        "description": "The ID of the environments."
                    }
                },
                "required": [
                    "environmentUuid"
                ]
            },
            "ClaEnvironmentListDto": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "records": {
                        "description": "A list of environments of the account.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaEnvironmentDto"
                        }
                    }
                },
                "required": [
                    "totalCount",
                    "records"
                ]
            },
            "ConsumptionReturnDto": {
                "type": "object",
                "properties": {
                    "timeFrameStart": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The start date and time of the report interval in `2021-05-01T15:11:00Z` format."
                    },
                    "timeFrameEnd": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The end date and time of the report interval in `2021-05-01T15:11:00Z` format."
                    },
                    "consumptionType": {
                        "type": "string",
                        "description": "The name of the consumed units (for example, `Davis data units`)."
                    },
                    "quantity": {
                        "type": "number",
                        "description": "The quantity that has been deducted from the available unit's pool."
                    }
                },
                "required": [
                    "timeFrameStart",
                    "timeFrameEnd",
                    "consumptionType",
                    "quantity"
                ]
            },
            "ConsumptionReturnListDto": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "records": {
                        "description": "A list of consumption records.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsumptionReturnDto"
                        }
                    }
                },
                "required": [
                    "totalCount",
                    "records"
                ]
            },
            "ClusterOrEnvironmentAggregatedReturnDto": {
                "type": "object",
                "properties": {
                    "resourceName": {
                        "type": "string",
                        "description": "The name of the resource."
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the resource: environment or cluster."
                    },
                    "consumptionRecords": {
                        "type": "object",
                        "description": "A list of consumption records."
                    }
                },
                "required": [
                    "resourceName",
                    "resourceType",
                    "consumptionRecords"
                ]
            },
            "ClaSubscriptionTermDto": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "number",
                        "description": "The annual [commit](https://dt-url.net/i503u3z) of the Dynatrace Platform Subscription."
                    },
                    "startDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The start date of the subscription in `2021-05-01T15:11:00Z` format."
                    },
                    "endDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The end date of the subscription in `2021-05-01T15:11:00Z` format."
                    }
                },
                "required": [
                    "limit",
                    "startDate",
                    "endDate"
                ]
            },
            "ClaBudgetLimitRecordsDto": {
                "type": "object",
                "properties": {
                    "clusterUuid": {
                        "type": "string",
                        "description": "The ID of the cluster to which the limit applies."
                    },
                    "environmentUuid": {
                        "type": "string",
                        "description": "The ID of the environment to which the limit applies."
                    },
                    "dimensionName": {
                        "type": "string",
                        "description": "The consumption units to which the limit applies."
                    },
                    "tierType": {
                        "type": "string",
                        "enum": [
                            "LIMIT"
                        ]
                    },
                    "startDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date and time when the restriction takes effect in `2021-05-01T15:11:00Z` format. \n\n The limit is not enforeced in real-time and might lead to overages."
                    },
                    "endDate": {
                        "format": "date-time",
                        "type": "string",
                        "description": "The date and time when the restriction ends in `2021-05-01T15:11:00Z` format. \n\n The limit is not enforeced in real-time and might lead to overages."
                    },
                    "amount": {
                        "type": "number",
                        "description": "The limit for the cluster or environment. \n\n If consumption exceeds the limit, monitoring will stop."
                    },
                    "subscriptionId": {
                        "type": "number",
                        "description": "The ID of the Dynatrace Platform Subscription."
                    }
                },
                "required": [
                    "clusterUuid",
                    "environmentUuid",
                    "dimensionName",
                    "tierType",
                    "startDate",
                    "endDate",
                    "amount",
                    "subscriptionId"
                ]
            },
            "ClaBudgetLimitRecordListDto": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "number",
                        "description": "The number of entries in the list."
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaBudgetLimitRecordsDto"
                        }
                    }
                },
                "required": [
                    "totalCount",
                    "records"
                ]
            },
            "ClaBudgetLimitDto": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "number",
                        "description": "The limit for the cluster or environment. Consumption will be restricted to this value."
                    }
                },
                "required": [
                    "limit"
                ]
            }
        }
    },
    "externalDocs": {
        "description": "JSON schema",
        "url": "/spec-json"
    },
    "paths": {
        "/iam/v1/accounts/{accountUuid}/users": {
            "get": {
                "operationId": "UsersController_getUsers",
                "summary": "Lists all users of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the list of users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "UsersController_createUserForAccount",
                "summary": "Creates a new user in an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the email address of the new user.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserEmailDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The new user has been created. Response doesn't have a body."
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/accounts/{accountUuid}/users/{email}": {
            "get": {
                "operationId": "UsersController_getUserGroups",
                "summary": "Lists all groups of a user",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": true,
                        "in": "path",
                        "description": "The email address of the required user.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the groups of the user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupUserDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "UsersController_addUserToGroups",
                "summary": "Adds a user to groups. Any existing group membership remains unaffected.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": true,
                        "in": "path",
                        "description": "The email address of the required user.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The body of the request. Contains a list of groups (specified by UUIDs) to which the user is to be added. \n\n Any existing group membership remains unaffected.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The user has been added to the groups. Response doesn't have a body."
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "UsersController_removeUserFromAccount",
                "summary": "Removes a user from an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": true,
                        "in": "path",
                        "description": "The email address of the required user.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The user has been deleted. Response doesn't have a body."
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/accounts/{accountUuid}/users/{email}/groups": {
            "put": {
                "operationId": "UsersController_replaceUserGroups",
                "summary": "Sets group membership of a user. Any existing membership is overwritten.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": true,
                        "in": "path",
                        "description": "The email address of the required user.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The body of the request. Contains a list of groups (specified by UUIDs) where the user is to be a member. \n\n The user will be removed from any group that is not specified here.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The group membership has been set. Response doesn't have a body."
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "UsersController_removeUserFromGroups",
                "summary": "Removes a user from groups",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "required": true,
                        "in": "path",
                        "description": "The email address of the required user.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "group-uuid",
                        "required": true,
                        "in": "query",
                        "description": "A list of groups the user is no longer a member of. \n\n To specify several groups, use the following format: `group-uuid=aaaaaa&group-uuid=bbbb`.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The user has been removed from groups. Response doesn't have a body."
                    }
                },
                "tags": [
                    "User management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/accounts/{accountUuid}/groups": {
            "get": {
                "operationId": "GroupsController_getGroups",
                "summary": "Lists all user groups of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the list of user groups.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Group management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "GroupsController_createGroups",
                "summary": "Creates new user groups",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The body of the request. Contains a list of configurations for new groups. \n\n Do not specify a UUID. A UUID is assigned automatically by Dynatrace. ",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PutGroupDto"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The response contains descriptions of newly created groups.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetGroupDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Group management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/accounts/{accountUuid}/groups/{groupUuid}/users": {
            "get": {
                "operationId": "GroupsController_getUsersForGroup",
                "summary": "Lists all members of a group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "description": "The UUID of the required user group.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains members of the group.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupUserListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Group management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/accounts/{accountUuid}/groups/{groupUuid}": {
            "put": {
                "operationId": "GroupsController_editGroup",
                "summary": "Edits a user group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "description": "The UUID of the required user group.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The body of the request. Contains the updated parameters of the group. \n\n You can't change the UUID of the group.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PutGroupDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The group has been modified. The response doesn't have a body."
                    }
                },
                "tags": [
                    "Group management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "GroupsController_deleteGroup",
                "summary": "Deletes a user group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "description": "The UUID of the required user group.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The group has been deleted. The response doesn't have a body."
                    }
                },
                "tags": [
                    "Group management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/accounts/{accountUuid}/groups/{groupUuid}/permissions": {
            "get": {
                "operationId": "PermissionsController_getGroupPermissions",
                "summary": "Get all permissions for a group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionsGroupDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Permission Management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "PermissionsController_addGroupPermissions",
                "summary": "Add permissions to a group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PermissionDto"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "tags": [
                    "Permission Management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "PermissionsController_overwriteGroupPermissions",
                "summary": "Set permissions for a group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PermissionDto"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Permission Management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "PermissionsController_removeGroupPermissions",
                "summary": "Remove a permission from a group",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "permission-name",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "account-company-info",
                                "account-user-management",
                                "account-viewer",
                                "tenant-viewer",
                                "tenant-manage-settings",
                                "tenant-agent-install",
                                "tenant-logviewer",
                                "tenant-view-sensitive-request-data",
                                "tenant-configure-request-capture-data",
                                "tenant-replay-sessions-with-masking",
                                "tenant-replay-sessions-without-masking",
                                "tenant-manage-security-problems",
                                "tenant-manage-support-tickets"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope-type",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "account",
                                "tenant",
                                "management-zone"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "tags": [
                    "Permission Management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/policies/aggregate": {
            "get": {
                "operationId": "PolicyController_getPolicyOverviewList",
                "summary": "Lists all policies for a level, including inherited from higher levels",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the list of policies.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PolicyOverviewDtoList"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/policies": {
            "get": {
                "operationId": "PolicyController_getLevelPolicies",
                "summary": "Lists all native policies of a level",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the list of policies.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PolicyDtoList"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "PolicyController_createLevelPolicy",
                "summary": "Creates a new policy",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The folloving values are available: \n\n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits policies of a higher level and extends it with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the configuration of a new policy.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrUpdateLevelPolicyRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The policy has been created. The response contains the configration of the policy.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LevelPolicyDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/policies/validation": {
            "post": {
                "operationId": "PolicyController_validateNewLevelPolicy",
                "summary": "Validates the payload for the `POST /iam/v1/repo/{levelType}/{levelId}/policies` request",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The folloving values are available: \n\n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits policies of a higher level and extends it with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the configuration of a policy to be validated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrUpdateLevelPolicyRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The submitted policy is valid. Check the response body for possible validation warnings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/policies/validation/{policyUuid}": {
            "post": {
                "operationId": "PolicyController_validateLevelPolicy",
                "summary": "Validates the payload for the `PUT /iam/v1/repo/{levelType}/{levelId}/policies/{policyUuid}` request",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The folloving values are available: \n\n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits policies of a higher level and extends it with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the poilicy to be validated.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the configuration of a policy to be validated.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrUpdateLevelPolicyRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The submitted policy is valid. Check the response body for possible validation warnings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/policies/{policyUuid}": {
            "get": {
                "operationId": "PolicyController_getLevelPolicy",
                "summary": "Gets a policy",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required policy.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the configuration of the policy.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LevelPolicyDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "PolicyController_updateLevelPolicy",
                "summary": "Updates a policy",
                "description": "If the specified policy doesn't exist, a new one is created.",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The folloving values are available: \n\n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits policies of a higher level and extends it with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required policy.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the updated configuration of a policy.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrUpdateLevelPolicyRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The policy has been created. The response contains the configration of the policy.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LevelPolicyDto"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Success. The policy has been updated. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "PolicyController_deleteLevelPolicy",
                "summary": "Deletes a policy",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The folloving values are available: \n\n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits policies of a higher level and extends it with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required policy.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "force",
                        "required": true,
                        "in": "path",
                        "description": "Set to `true` to delete a policy that is still in use.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success. The policy has been deleted. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/bindings/groups/{groupUuid}": {
            "get": {
                "operationId": "PolicyController_getPolicyUuidsBindings",
                "summary": "Lists all policies for a user group",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required user group.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the list of polcies.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PolicyUuidsDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "PolicyController_updatePolicyBindingsToGroup",
                "summary": "Updates policies for a user group",
                "description": "The request overwrites exisiting policies.",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required user group.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains new policies for the group. \n\n Any policy not presented in the request is discarded.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PolicyUuidsDto"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success. The group policies have been updated. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/bindings": {
            "get": {
                "operationId": "PolicyController_getLevelPolicyBindings",
                "summary": "Lists all policy bindings of a level",
                "description": "A policy binding shows which user groups use the policy.",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains bindings of the level policies.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LevelPolicyBindingDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "PolicyController_updateLevelPolicyBindings",
                "summary": "Updates policy bindings of a level",
                "description": "The request overwrited all existing bindings.",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Cointains new policy bindings of a level. \n\n Any existing binding not presented in the request is discarded.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLevelPolicyBindingsRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success. The binding policies have been updated. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "PolicyController_deleteLevelPolicyBindings",
                "summary": "Deletes all policy bindings from a level",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success. Policy bindings have been deleted. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/bindings/{policyUuid}": {
            "post": {
                "operationId": "PolicyController_appendLevelPolicyBindings",
                "summary": "Adds policy bindings to a level",
                "description": "Existing bindings remain unaffected.",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required policy.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains user groups that must use the policy.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppendLevelPolicyBindingsRequestDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. Policy bindings have been updated. The response contains the list of affected groups.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LevelBindingGroupDto"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "PolicyController_deleteLevelPolicyBindingsForPolicy",
                "summary": "Deletes all bindings of a policy",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required policy.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success. Policy bindings have been deleted. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/iam/v1/repo/{levelType}/{levelId}/bindings/{policyUuid}/{groupUuid}": {
            "delete": {
                "operationId": "PolicyController_deleteLevelPolicyBindingsForPolicyAndGroup",
                "summary": "Deletes a policy binding from a user group",
                "parameters": [
                    {
                        "name": "levelType",
                        "required": true,
                        "in": "path",
                        "description": "The type of the [policy](https://dt-url.net/eu03uap) level. The following values are available: \n\n* `global`: A global policy applies to all accounts and environments. It is defined and managed by Dynatrace. \n* `account`: An account policy applies to all environments of an account. \n* `environment`: An environment policy applies to a specific environment. \n\n Each level inherits the policies of the higher level and extends them with its own policies.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "levelId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the policy level. Use one of the following values, depending on the level type: \n\n* global: use the `global` value. \n* account: use the UUID of the account. \n* environment: use the ID of the environment.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "policyUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required policy.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required user group.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success. Policy binding has been deleted. The response doesn't have a body."
                    },
                    "400": {
                        "description": "Failed. The request is invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Failed. The specified resource is not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Policy management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/env/v1/accounts/{accountUuid}/quotas/host-monitoring": {
            "get": {
                "operationId": "QuotaController_getQuota",
                "summary": "Gets the host units quota of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the [host units](https://dt-url.net/hu03ub5) quota per environment of the account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractLimitDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Quota management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "patch": {
                "operationId": "QuotaController_splitHostMonitoringCredits",
                "summary": "Updates environment-level host unit quotas",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the list of environment-level quotas to be set.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/EnvironmentChangeListDto"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The quota has been updated. The response doesn't have a body."
                    }
                },
                "tags": [
                    "Quota management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/env/v1/accounts/{accountUuid}/quotas/host-monitoring/environments/{environmentUuid}/overage": {
            "put": {
                "operationId": "QuotaController_enableOverage",
                "summary": "Sets the host units overage",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the environment where you want to set the overage.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the [host units](https://dt-url.net/hu03ub5) overage setting.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HostMonitoringOverageEnabledDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The overage has been set. The response doesn't have a body."
                    }
                },
                "tags": [
                    "Quota management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/env/v1/accounts/{accountUuid}/environments": {
            "get": {
                "operationId": "EnvironmentResourcesController_getEnvironmentResources",
                "summary": "Lists all environments and management zones of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains a list of the account's environments.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentResourceDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environment management"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/ref/v1/time-zones": {
            "get": {
                "operationId": "ReferenceDataController_getTimezones",
                "summary": "Get names of all timezones available",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TimeZoneDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Reference Data"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/ref/v1/regions": {
            "get": {
                "operationId": "ReferenceDataController_getRegions",
                "summary": "Get names of all regions available",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegionDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Reference Data"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/ref/v1/account/permissions": {
            "get": {
                "operationId": "ReferenceDataController_getPermissions",
                "summary": "Get names of all permissions available for any given account",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PermissionDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Reference Data"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions": {
            "get": {
                "operationId": "LimaClaController_getClaSubscriptions",
                "summary": "Lists all Dynatrace platform subscriptions of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains a list of the account's subscriptions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaSubscriptionListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/clusters": {
            "get": {
                "operationId": "LimaClaController_getClaSubscriptionClusterDetails",
                "summary": "Lists all clusters of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains a list of the account's clusters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaClusterListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/environments": {
            "get": {
                "operationId": "LimaClaController_getClaSubscriptionEnvironmentDetails",
                "summary": "Lists all clusters of an account",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains a list of the account's environments.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaEnvironmentListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/consumption": {
            "get": {
                "operationId": "LimaClaController_getProductLevelClaLicenseConsumptionData",
                "summary": "Gets the consumption of a subscription",
                "description": "You can narrow down the output by specifying the timeframe during which the consumption happened.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "resolution",
                        "required": true,
                        "in": "query",
                        "description": "The resolution at which you want to see the consumption. You have the following options: \n\n* `HOURLY`: the consumption for each full hour. Requires **to** and **from** paramters to be set. The hourly resolution is only available for consumption within the last 30 days. \n* `DAILY`: the consumption for each calendar day. Requires **to** and **from** paramters to be set. \n* `SUBSCRIPTION_MONTHLY`: the consumption for each subscription month. A subscription month always starts on the same day of the month your subscription started. \n* `SUBSCRIPTION_YEAR`: the consumption for a complete subscription year. A subscription year always starts on the same date your subscription started.",
                        "isArray": false,
                        "schema": {
                            "enum": [
                                "HOURLY",
                                "DAILY",
                                "SUBSCRIPTION_MONTHLY",
                                "SUBSCRIPTION_YEARLY"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "required": false,
                        "in": "query",
                        "description": "The start of the requested timeframe in `2021-05-01T15:11:00Z` format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "required": false,
                        "in": "query",
                        "description": "The end of the requested timeframe in `2021-05-01T15:11:00Z` format.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains your consumption information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConsumptionReturnListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/clusters/consumption": {
            "get": {
                "operationId": "LimaClaController_getClusterLevelClaLicenseConsumptionData",
                "summary": "Gets the cluster-level consumption of a subscription",
                "description": "The endpoint is available only for Dynatrace Managed accounts.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "clusterUuids",
                        "required": false,
                        "in": "query",
                        "description": "Filter the result to specified clusters only. To specify several IDs, use the following format: `clusterUuids=ID1&clusterUuids=ID2`. \n\nYou can fetch the list of clusters with the [GET clusters](https://dt-url.net/3q03uao) request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "resolution",
                        "required": true,
                        "in": "query",
                        "description": "The resolution at which you want to see the consumption. You have the following options: \n\n* `HOURLY`: the consumption for each full hour. Requires **to** and **from** paramters to be set. The hourly resolution is only available for consumption within the last 30 days. \n* `DAILY`: the consumption for each calendar day. Requires **to** and **from** paramters to be set. \n* `SUBSCRIPTION_MONTHLY`: the consumption for each subscription month. A subscription month always starts on the same day of the month your subscription started. \n* `SUBSCRIPTION_YEAR`: the consumption for a complete subscription year. A subscription year always starts on the same date your subscription started.",
                        "isArray": false,
                        "schema": {
                            "enum": [
                                "HOURLY",
                                "DAILY",
                                "SUBSCRIPTION_MONTHLY",
                                "SUBSCRIPTION_YEARLY"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "required": false,
                        "in": "query",
                        "description": "The start of the requested timeframe in `2021-05-01T15:11:00Z` format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "required": false,
                        "in": "query",
                        "description": "The end of the requested timeframe in `2021-05-01T15:11:00Z` format.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains your consumption information on cluster level.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClusterOrEnvironmentAggregatedReturnDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/environments/consumption": {
            "get": {
                "operationId": "LimaClaController_getTenantLevelClaLicenseConsumptionData",
                "summary": "Gets the environment-level consumption of a subscription",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "environmentUuids",
                        "required": false,
                        "in": "query",
                        "description": "Filter the result to specified environments only. To specify several IDs, use the following format: `environmentUuids=ID1&environmentUuids=ID2`. \n\nYou can fetch the list of environments with the [GET environments](https://dt-url.net/6823uuy) request.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "resolution",
                        "required": true,
                        "in": "query",
                        "description": "The resolution at which you want to see the consumption. You have the following options: \n\n* `HOURLY`: the consumption for each full hour. Requires **to** and **from** paramters to be set. The hourly resolution is only available for consumption within the last 30 days. \n* `DAILY`: the consumption for each calendar day. Requires **to** and **from** paramters to be set. \n* `SUBSCRIPTION_MONTHLY`: the consumption for each subscription month. A subscription month always starts on the same day of the month your subscription started. \n* `SUBSCRIPTION_YEAR`: the consumption for a complete subscription year. A subscription year always starts on the same date your subscription started.",
                        "isArray": false,
                        "schema": {
                            "enum": [
                                "HOURLY",
                                "DAILY",
                                "SUBSCRIPTION_MONTHLY",
                                "SUBSCRIPTION_YEARLY"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "required": false,
                        "in": "query",
                        "description": "The start of the requested timeframe in `2021-05-01T15:11:00Z` format.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "required": false,
                        "in": "query",
                        "description": "The end of the requested timeframe in `2021-05-01T15:11:00Z` format.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains your consumption information on the environment level.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClusterOrEnvironmentAggregatedReturnDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/term": {
            "get": {
                "operationId": "LimaClaController_getClaLicenseDetailsById",
                "summary": "Gets the active term of a subscription",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains the details of the current Dynatrace platform subscription.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaSubscriptionTermDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/limits": {
            "get": {
                "operationId": "LimaClaController_getClaBudgetLimits",
                "summary": "Lists limits for a subscription",
                "description": "[Limits](https://dt-url.net/yz03uq5) help you control the usage of your annual [commit](https://dt-url.net/i503u3z). \n\nIf no limit is set, the commit is consumed until it is exhausted.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success. The response contains all limits of your account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaBudgetLimitRecordListDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/clusters/{clusterUuid}/limits": {
            "post": {
                "operationId": "LimaClaController_addClaBudgetLimitForCluster",
                "summary": "Creates a limit for a cluster",
                "description": "[Limits](https://dt-url.net/yz03uq5) help you control the usage of your annual [commit](https://dt-url.net/i503u3z). \n\nIf no limit is set, the commit is consumed until it is exhausted. If the consumption on the cluster exceeds the limit, the cluster will stop the monitoring. \n\nThe endpoint is available only for Dynatrace Managed accounts.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "clusterUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the cluster where you want to set the limit. \n\nYou can fetch the list of clusters with the [GET clusters](https://dt-url.net/3q03uao) request.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the new limit for the cluster.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClaBudgetLimitDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The response contains the description of the limit.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaBudgetLimitRecordsDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "LimaClaController_updateClaBudgetLimitForCluster",
                "summary": "Updates the limit for a cluster",
                "description": "[Limits](https://dt-url.net/yz03uq5) help you control the usage of your annual [commit](https://dt-url.net/i503u3z). \n\nIf no limit is set, the commit is consumed until it is exhausted. If the consumption on the cluster exceeds the limit, the cluster will stop the monitoring. \n\nThe endpoint is available only for Dynatrace Managed accounts.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "clusterUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the cluster where you want to set the limit. \n\nYou can fetch the list of clusters with the [GET clusters](https://dt-url.net/3q03uao) request.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClaBudgetLimitDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The response contains the description of the limit.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaBudgetLimitRecordsDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/sub/v1/accounts/{accountUuid}/subscriptions/{subscriptionId}/environments/{environmentUuid}/limits": {
            "post": {
                "operationId": "LimaClaController_addClaBudgetLimitForEnvironment",
                "summary": "Creates a limit for an environment",
                "description": "[Limits](https://dt-url.net/yz03uq5) help you control the usage of your annual [commit](https://dt-url.net/i503u3z). \n\nIf no limit is set, the commit is consumed until it is exhausted. If the consumption on the environment exceeds the limit, the environment will stop the monitoring.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "environmentUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the environment where you want to set the limit. \n\nYou can fetch the list of environments with the [GET environments](https://dt-url.net/6823uuy) request.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "description": "The JSON body of the request. Contains the new limit for the environment.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClaBudgetLimitDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success. The response contains the description of the limit.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaBudgetLimitRecordsDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "LimaClaController_updateClaBudgetLimitForEnvironment",
                "summary": "Updates the limit for an environment",
                "description": "[Limits](https://dt-url.net/yz03uq5) help you control the usage of your annual [commit](https://dt-url.net/i503u3z). \n\nIf no limit is set, the commit is consumed until it is exhausted. If the consumption on the environment exceeds the limit, the environment will stop the monitoring.",
                "parameters": [
                    {
                        "name": "accountUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required account. \n\n You can find the UUID on the **Account > Account management API** page, during creation of an OAuth client.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriptionId",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the required subscription. \n\n You can fetch the list of subscriptions with the [GET subscriptions](https://dt-url.net/qd43uld) call.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "environmentUuid",
                        "required": true,
                        "in": "path",
                        "description": "The ID of the environment where you want to set the limit. \n\nYou can fetch the list of environments with the [GET environments](https://dt-url.net/6823uuy) request.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClaBudgetLimitDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success. The response contains the description of the limit.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaBudgetLimitRecordsDto"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dynatrace platform subscription"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        }
    }
}